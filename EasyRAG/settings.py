"""
Django settings for EasyRAG project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import pymysql
pymysql.install_as_MySQLdb()

from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-bzwl$s((w*m1!@1r!)18(np=fj=h(uj-zw$azc==jp-7sm##&m"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    "rest_framework",
    "drf_yasg",
    "EasyRAG.user_app",
    "EasyRAG.rag_app",
    "EasyRAG.task_app",
    "EasyRAG.llm_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "EasyRAG.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "EasyRAG.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "easyrag",
        "USER": "root",
        "PASSWORD": "infini_rag_flow",
        "HOST": "127.0.0.1",
        "PORT": "3306",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "user_app.User"

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    
}

# JWT 设置
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
}

# Swagger UI 配置
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'JWT Token: Bearer <token>\n\n获取 Token 步骤:\n1. 访问 /api/token/ 获取 access_token\n2. 在请求头中添加: Authorization: Bearer <access_token>'
        },
        'Basic': {
            'type': 'basic',
            'description': '基本认证 (用户名/密码)'
        }
    },
    'SECURITY': [
        {
            'Bearer': []
        }
    ],
    'USE_SESSION_AUTH': True,
    'JSON_EDITOR': True,
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'delete',
        'patch'
    ],
    'OPERATIONS_SORTER': 'alpha',
    'TAGS_SORTER': 'alpha',
    'DOC_EXPANSION': 'none',
    'DEFAULT_MODEL_RENDERING': 'example',
    'DEEP_LINKING': True,
    'DISPLAY_OPERATION_ID': False,
    'DEFAULT_INFO': 'EasyRAG API Documentation',
    'DEFAULT_API_URL': 'http://localhost:8000/api/',
    'VALIDATOR_URL': None,
    'SHOW_REQUEST_HEADERS': True,
    'SHOW_EXTENSIONS': True,
    'SHOW_COMMON_EXTENSIONS': True,
    'OAUTH2_REDIRECT_URL': None,
    'OAUTH2_CONFIG': {
        'clientId': 'your-client-id',
        'clientSecret': 'your-client-secret',
        'realm': 'your-realm',
        'appName': 'your-app-name',
        'scopeSeparator': ' ',
        'additionalQueryStringParams': {}
    }
}

# MinIO配置
MINIO_CONFIG = {
    'endpoint': '127.0.0.1:9000',
    'access_key': 'rag_flow',
    'secret_key': 'infini_rag_flow',
    'secure': False,
}


# Elasticsearch配置
ELASTICSEARCH_CONFIG = {
    'hosts': ['http://localhost:9200'],
    'username': 'elastic',
    'password': 'infini_rag_flow',
    'use_ssl': os.getenv('ELASTICSEARCH_USE_SSL', "false").lower() == "true",
    'index_name': 'test_index',
    'vector_size': 1536,
    'similarity': 'cosine',
}

# Redis 配置
REDIS_CONFIG = {
    "host": os.getenv('REDIS_HOST', 'localhost'),
    "port": int(os.getenv('REDIS_PORT', '6379')),
    "db": int(os.getenv('REDIS_DB', '0')),
    "username": os.getenv('REDIS_USERNAME', ''),  # 明确设置为空字符串，表示不使用用户名
    "password": os.getenv('REDIS_PASSWORD', 'infini_rag_flow'),
    "cluster_mode": os.getenv('REDIS_CLUSTER_MODE', 'false').lower() == 'true',
    "cluster_nodes": os.getenv('REDIS_CLUSTER_NODES', '').split(',') if os.getenv('REDIS_CLUSTER_NODES') else None,
    "max_connections": int(os.getenv('REDIS_MAX_CONNECTIONS', '10')),
    "socket_connect_timeout": int(os.getenv('REDIS_CONNECT_TIMEOUT', '5')),
    "socket_timeout": int(os.getenv('REDIS_SOCKET_TIMEOUT', '5')),
    "retry_on_timeout": True,
}

# RAG 组件配置
VECTOR_DATABASE_TYPE = os.getenv('VECTOR_DATABASE_TYPE', 'elasticsearch')
FILE_STORAGE_TYPE = os.getenv('FILE_STORAGE_TYPE', 'minio')
FILE_PARSER_TYPE = os.getenv('FILE_PARSER_TYPE', 'mineru')

# Celery 配置
# 构建带认证的 Redis URL
if REDIS_CONFIG.get('username') and REDIS_CONFIG.get('password'):
    CELERY_BROKER_URL = f"redis://{REDIS_CONFIG['username']}:{REDIS_CONFIG['password']}@{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db']}"
    CELERY_RESULT_BACKEND = f"redis://{REDIS_CONFIG['username']}:{REDIS_CONFIG['password']}@{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db']}"
elif REDIS_CONFIG.get('password'):
    # 只有密码，没有用户名
    CELERY_BROKER_URL = f"redis://:{REDIS_CONFIG['password']}@{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db']}"
    CELERY_RESULT_BACKEND = f"redis://:{REDIS_CONFIG['password']}@{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db']}"
else:
    CELERY_BROKER_URL = f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db']}"
    CELERY_RESULT_BACKEND = f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db']}"

CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = True

# Celery 任务路由
CELERY_TASK_ROUTES = {
    'EasyRAG.tasks.*': {'queue': 'rag_tasks'},
    'EasyRAG.tasks.document_parsing.*': {'queue': 'document_parsing'},
    'EasyRAG.tasks.workflow.*': {'queue': 'workflow_tasks'},
}

# Celery 任务执行配置
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_RESULT_EXPIRES = 3600

# Celery 任务重试配置
CELERY_TASK_ANNOTATIONS = {
    '*': {
        'retry_backoff': True,
        'retry_backoff_max': 600,
        'max_retries': 3,
    }
}

# Celery 工作流配置
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_EAGER_PROPAGATES = True

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'django.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'EasyRAG.llm_app': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'EasyRAG.llm_app.serializers': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'EasyRAG.llm_app.views': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

